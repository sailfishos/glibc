From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bj=C3=B6rn=20Bidar?= <bjorn.bidar@jolla.com>
Date: Tue, 31 Aug 2021 01:52:27 +0300
Subject: [PATCH] (scratchbox2) Add options to not set any default dirs for
 ld.so

Adds a new option "--nodefaultdirs" to ld.so.

This option disables searching from the default directories
(/lib,/usr/lib) and also disables use of ld.so's search
cache.

This is recommended for correct operation with Scratchbox 2;
without this, libraries may be incorrectly loaded from the
host environment (such libraries that are missing from
the "scratchboxed" environment but are present in the host).
---
 elf/dl-load.c              | 8 +++++---
 elf/dl-support.c           | 3 +++
 elf/dl-usage.c             | 1 +
 elf/rtld.c                 | 7 +++++++
 sysdeps/generic/ldsodefs.h | 2 ++
 5 files changed, 18 insertions(+), 3 deletions(-)

diff --git a/elf/dl-load.c b/elf/dl-load.c
index f905578a65..a0e105a5a8 100644
--- a/elf/dl-load.c
+++ b/elf/dl-load.c
@@ -2060,7 +2060,8 @@ _dl_map_object (struct link_map *loader, const char *name,
 
 	      /* If the loader has the DF_1_NODEFLIB flag set we must not
 		 use a cache entry from any of these directories.  */
-	      if (__glibc_unlikely (l->l_flags_1 & DF_1_NODEFLIB))
+	      if (__glibc_unlikely (l->l_flags_1 & DF_1_NODEFLIB) ||
+                       GLRO(dl_no_default_dirs))
 		{
 		  const char *dirp = system_dirs;
 		  unsigned int cnt = 0;
@@ -2099,7 +2100,8 @@ _dl_map_object (struct link_map *loader, const char *name,
       /* Finally, try the default path.  */
       if (fd == -1
 	  && ((l = loader ?: GL(dl_ns)[nsid]._ns_loaded) == NULL
-	      || __glibc_likely (!(l->l_flags_1 & DF_1_NODEFLIB)))
+	      || __glibc_likely (!(l->l_flags_1 & DF_1_NODEFLIB)) ||
+		GLRO(dl_no_default_dirs))
 	  && __rtld_search_dirs.dirs != (void *) -1)
 	fd = open_path (name, namelen, mode, &__rtld_search_dirs,
 			&realname, &fb, l, LA_SER_DEFAULT, &found_other_class);
@@ -2279,7 +2281,7 @@ _dl_rtld_di_serinfo (struct link_map *loader, Dl_serinfo *si, bool counting)
      a way to indicate that in the results for Dl_serinfo.  */
 
   /* Finally, try the default path.  */
-  if (!(loader->l_flags_1 & DF_1_NODEFLIB))
+  if (!((loader->l_flags_1 & DF_1_NODEFLIB) || GLRO(dl_no_default_dirs)))
     add_path (&p, &__rtld_search_dirs, XXX_default);
 
   if (counting)
diff --git a/elf/dl-support.c b/elf/dl-support.c
index a7d5a5e8ab..e24b6012e4 100644
--- a/elf/dl-support.c
+++ b/elf/dl-support.c
@@ -65,6 +65,9 @@ int _dl_verbose;
    ignored.  */
 const char *_dl_inhibit_rpath;
 
+/* flag: don't search default directories if set. */
+int _dl_no_default_dirs = 0;
+
 /* The map for the object we will profile.  */
 struct link_map *_dl_profile_map;
 
diff --git a/elf/dl-usage.c b/elf/dl-usage.c
index c6d13ac2ee..8c07084f14 100644
--- a/elf/dl-usage.c
+++ b/elf/dl-usage.c
@@ -185,6 +185,7 @@ setting environment variables (which would be inherited by subprocesses).\n\
   --list                list all dependencies and how they are resolved\n\
   --verify              verify that given object really is a dynamically linked\n\
                         object we can handle\n\
+  --nodefaultdirs       Do not search from default directories or cache\n\
   --inhibit-cache       Do not use " LD_SO_CACHE "\n\
   --library-path PATH   use given PATH instead of content of the environment\n\
                         variable LD_LIBRARY_PATH\n\
diff --git a/elf/rtld.c b/elf/rtld.c
index 00bec15316..24bdb75f43 100644
--- a/elf/rtld.c
+++ b/elf/rtld.c
@@ -1378,6 +1378,13 @@ dl_main (const ElfW(Phdr) *phdr,
 	    --_dl_argc;
 	    ++_dl_argv;
 	  }
+	else if (! strcmp (_dl_argv[1], "--nodefaultdirs")
+		 && _dl_argc > 2)
+	  {
+	    GLRO(dl_no_default_dirs) = 1;
+	    --_dl_argc;
+	    ++_dl_argv;
+	  }
 	else if (! strcmp (_dl_argv[1], "--library-path")
 		 && _dl_argc > 2)
 	  {
diff --git a/sysdeps/generic/ldsodefs.h b/sysdeps/generic/ldsodefs.h
index e871f27ff2..243a4fbba4 100644
--- a/sysdeps/generic/ldsodefs.h
+++ b/sysdeps/generic/ldsodefs.h
@@ -630,6 +630,8 @@ struct rtld_global_ro
 
   EXTERN enum dso_sort_algorithm _dl_dso_sort_algo;
 
+  EXTERN int _dl_no_default_dirs;
+
 #ifdef SHARED
   /* We add a function table to _rtld_global which is then used to
      call the function instead of going through the PLT.  The result
